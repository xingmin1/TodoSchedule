// Code generated by SynkAdapter plugin. Do not edit this file.
package com.example.todoschedule.data.sync.adapter

import com.example.todoschedule.data.database.converter.ReminderType
import com.example.todoschedule.data.database.converter.ScheduleType
import com.example.todoschedule.data.database.entity.TimeSlotEntity
import com.tap.synk.encode.MapEncoder
import com.tap.synk.serialize.EnumStringSerializer

public class TimeSlotEntityMapEncoder(
    private val scheduleTypeSerializer: EnumStringSerializer<ScheduleType> =
            EnumStringSerializer<ScheduleType>(),
    private val reminderTypeSerializer: EnumStringSerializer<ReminderType> =
            EnumStringSerializer<ReminderType>(),
) : MapEncoder<TimeSlotEntity> {
    override fun encode(crdt: TimeSlotEntity): Map<String, String> = buildMap {
        put("id", crdt.id.toString())
        put("userId", crdt.userId.toString())
        put("startTime", crdt.startTime.toString())
        put("endTime", crdt.endTime.toString())
        put("scheduleType", scheduleTypeSerializer.serialize(crdt.scheduleType))
        put("scheduleId", crdt.scheduleId.toString())
        crdt.head?.let { put("head", it) }
        crdt.priority?.let { put("priority", it.toString()) }
        put("isCompleted", crdt.isCompleted.toString())
        put("isRepeated", crdt.isRepeated.toString())
        crdt.repeatPattern?.let { put("repeatPattern", it) }
        crdt.reminderOffset?.let { put("reminderOffset", it.toString()) }
        put("crdtKey", crdt.crdtKey)
        crdt.scheduleCrdtKey?.let { put("scheduleCrdtKey", it) }
        crdt.updateTimestamp?.let { put("updateTimestamp", it.toString()) }
        crdt.reminderType?.let { put("reminderType", reminderTypeSerializer.serialize(it)) }
    }

    override fun decode(map: Map<String, String>): TimeSlotEntity = TimeSlotEntity(
        id = map.getValue("id").toInt(),
        userId = map.getValue("userId").toInt(),
        startTime = map.getValue("startTime").toLong(),
        endTime = map.getValue("endTime").toLong(),
        scheduleType = scheduleTypeSerializer.deserialize(map.getValue("scheduleType")),
        scheduleId = map.getValue("scheduleId").toInt(),
        head = map["head"],
        priority = map["priority"]?.toIntOrNull(),
        isCompleted = map.getValue("isCompleted").toBoolean(),
        isRepeated = map.getValue("isRepeated").toBoolean(),
        repeatPattern = map["repeatPattern"],
        reminderType = map["reminderType"]?.let { reminderTypeSerializer.deserialize(it) },
        reminderOffset = map["reminderOffset"]?.toLongOrNull(),
        crdtKey = map.getValue("crdtKey"),
        scheduleCrdtKey = map["scheduleCrdtKey"],
        updateTimestamp = map["updateTimestamp"]?.toLongOrNull()
    )
}
