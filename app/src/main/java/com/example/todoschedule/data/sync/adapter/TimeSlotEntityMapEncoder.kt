// Code generated by SynkAdapter plugin. Do not edit this file.
package com.example.todoschedule.data.sync.adapter

import com.example.todoschedule.data.database.converter.ReminderType
import com.example.todoschedule.data.database.converter.ScheduleType
import com.example.todoschedule.data.database.entity.TimeSlotEntity
import com.tap.synk.encode.MapEncoder
import com.tap.synk.serialize.EnumStringSerializer

public class TimeSlotEntityMapEncoder(
    private val scheduleTypeSerializer: EnumStringSerializer<ScheduleType> =
            EnumStringSerializer<ScheduleType>(),
    private val reminderTypeSerializer: EnumStringSerializer<ReminderType> =
            EnumStringSerializer<ReminderType>(),
) : MapEncoder<TimeSlotEntity> {
    public override fun encode(crdt: TimeSlotEntity): Map<String, String> {
        val map = mutableMapOf<String, String>()
        map["id"] = crdt.id.toString()
        map["userId"] = crdt.userId.toString()
        map["startTime"] = crdt.startTime.toString()
        map["endTime"] = crdt.endTime.toString()
        map["scheduleId"] = crdt.scheduleId.toString()
        map["head"] = crdt.head.toString()
        map["priority"] = crdt.priority.toString()
        map["isCompleted"] = crdt.isCompleted.toString()
        map["isRepeated"] = crdt.isRepeated.toString()
        map["repeatPattern"] = crdt.repeatPattern.toString()
        map["reminderOffset"] = crdt.reminderOffset.toString()
        map["crdtKey"] = crdt.crdtKey
        map["scheduleCrdtKey"] = crdt.scheduleCrdtKey.toString()
        map["updateTimestamp"] = crdt.updateTimestamp.toString()
        map["scheduleType"] = scheduleTypeSerializer.serialize(crdt.scheduleType)
        crdt.reminderType?.let { map["reminderType"] =
                reminderTypeSerializer.serialize(crdt.reminderType) }
        return map
    }

    public override fun decode(map: Map<String, String>): TimeSlotEntity {
        val crdt = TimeSlotEntity(
            map["id"]!!.toInt(),
            map["userId"]!!.toInt(),
            map["startTime"]!!.toLong(),
            map["endTime"]!!.toLong(),
            scheduleTypeSerializer.deserialize(map["scheduleType"]!!),
            map["scheduleId"]!!.toInt(),
            map["head"],
            map["priority"]?.toInt(),
            map["isCompleted"]!!.toBoolean(),
            map["isRepeated"]!!.toBoolean(),
            map["repeatPattern"],
            map["reminderType"]?.let { reminderTypeSerializer.deserialize(it) },
            map["reminderOffset"]?.toLong(),
            map["crdtKey"]!!,
            map["scheduleCrdtKey"],
            map["updateTimestamp"]?.toLong(),
        )
        return crdt
    }
}
