// Code generated by SynkAdapter plugin. Do not edit this file.
package com.example.todoschedule.data.sync.adapter

import com.example.todoschedule.data.database.entity.TableEntity
import com.tap.synk.encode.MapEncoder

public class TableEntityMapEncoder : MapEncoder<TableEntity> {
    public override fun encode(crdt: TableEntity): Map<String, String> {
        val map = mutableMapOf<String, String>()
        map["id"] = crdt.id.toString()
        map["userId"] = crdt.userId.toString()
        map["tableName"] = crdt.tableName
        map["background"] = crdt.background
        map["listPosition"] = crdt.listPosition.toString()
        map["terms"] = crdt.terms
        map["startDate"] = crdt.startDate.toString()
        map["totalWeeks"] = crdt.totalWeeks.toString()
        map["crdtKey"] = crdt.crdtKey
        map["userCrdtKey"] = crdt.userCrdtKey.toString()
        map["updateTimestamp"] = crdt.updateTimestamp.toString()
        return map
    }

    public override fun decode(map: Map<String, String>): TableEntity {
        val crdt = TableEntity(
            map["id"]!!.toInt(),
            map["userId"]!!.toInt(),
            map["tableName"]!!,
            map["background"]!!,
            map["listPosition"]!!.toInt(),
            map["terms"]!!,
            kotlinx.datetime.LocalDate.parse(map["startDate"]!!),
            map["totalWeeks"]!!.toInt(),
            map["crdtKey"]!!,
            map["userCrdtKey"],
            map["updateTimestamp"]?.toLong(),
        )
        return crdt
    }
}
