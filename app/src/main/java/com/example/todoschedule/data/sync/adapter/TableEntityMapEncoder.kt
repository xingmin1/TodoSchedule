// Code generated by SynkAdapter plugin. Do not edit this file.
package com.example.todoschedule.data.sync.adapter

import com.example.todoschedule.data.database.entity.TableEntity
import com.tap.synk.encode.MapEncoder
import kotlinx.datetime.LocalDate

public class TableEntityMapEncoder : MapEncoder<TableEntity> {
    override fun encode(crdt: TableEntity): Map<String, String> = buildMap {
        put("id", crdt.id.toString())
        put("userId", crdt.userId.toString())
        put("tableName", crdt.tableName)
        put("background", crdt.background)
        put("listPosition", crdt.listPosition.toString())
        put("terms", crdt.terms)
        put("startDate", crdt.startDate.toString())
        put("totalWeeks", crdt.totalWeeks.toString())
        put("crdtKey", crdt.crdtKey)
        put("userCrdtKey", crdt.userCrdtKey.orEmpty())
        put("updateTimestamp", crdt.updateTimestamp?.toString() ?: "")
    }

    override fun decode(map: Map<String, String>): TableEntity = TableEntity(
        id = map.getValue("id").toInt(),
        userId = map.getValue("userId").toInt(),
        tableName = map.getValue("tableName"),
        background = map.getValue("background"),
        listPosition = map.getValue("listPosition").toInt(),
        terms = map.getValue("terms"),
        startDate = LocalDate.parse(map.getValue("startDate")),
        totalWeeks = map.getValue("totalWeeks").toInt(),
        crdtKey = map.getValue("crdtKey"),
        userCrdtKey = map["userCrdtKey"].takeUnless { it.isNullOrBlank() },
        updateTimestamp = map["updateTimestamp"].takeUnless { it.isNullOrBlank() }?.toLongOrNull()
    )
}
