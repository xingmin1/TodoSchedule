// Code generated by SynkAdapter plugin. Do not edit this file.
package com.example.todoschedule.data.sync.adapter

import com.example.todoschedule.data.database.converter.ScheduleStatus
import com.example.todoschedule.data.database.entity.OrdinaryScheduleEntity
import com.tap.synk.encode.MapEncoder
import com.tap.synk.serialize.EnumStringSerializer

public class OrdinaryScheduleEntityMapEncoder(
    private val statusSerializer: EnumStringSerializer<ScheduleStatus> =
            EnumStringSerializer<ScheduleStatus>(),
) : MapEncoder<OrdinaryScheduleEntity> {
    override fun encode(crdt: OrdinaryScheduleEntity): Map<String, String> = buildMap {
        put("id", crdt.id.toString())
        put("userId", crdt.userId.toString())
        put("title", crdt.title)
        put("description", crdt.description.orEmpty())
        put("location", crdt.location.orEmpty())
        put("category", crdt.category.orEmpty())
        put("color", crdt.color.orEmpty())
        put("isAllDay", crdt.isAllDay.toString())
        put("status", crdt.status?.let { statusSerializer.serialize(it) } ?: "")
        put("crdtKey", crdt.crdtKey)
        put("userCrdtKey", crdt.userCrdtKey.orEmpty())
        put("updateTimestamp", crdt.updateTimestamp?.toString() ?: "")
    }

    override fun decode(map: Map<String, String>): OrdinaryScheduleEntity = OrdinaryScheduleEntity(
        id = map.getValue("id").toInt(),
        userId = map.getValue("userId").toInt(),
        title = map.getValue("title"),
        description = map["description"].takeUnless { it.isNullOrBlank() },
        location = map["location"].takeUnless { it.isNullOrBlank() },
        category = map["category"].takeUnless { it.isNullOrBlank() },
        color = map["color"].takeUnless { it.isNullOrBlank() },
        isAllDay = map.getValue("isAllDay").toBoolean(),
        status = map["status"].takeUnless { it.isNullOrBlank() }?.let { statusSerializer.deserialize(it) },
        crdtKey = map.getValue("crdtKey"),
        userCrdtKey = map["userCrdtKey"].takeUnless { it.isNullOrBlank() },
        updateTimestamp = map["updateTimestamp"].takeUnless { it.isNullOrBlank() }?.toLongOrNull()
    )

}
