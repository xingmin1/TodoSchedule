// Code generated by SynkAdapter plugin. Do not edit this file.
package com.example.todoschedule.data.sync.adapter

import com.example.todoschedule.data.database.converter.ScheduleStatus
import com.example.todoschedule.data.database.entity.OrdinaryScheduleEntity
import com.tap.synk.encode.MapEncoder
import com.tap.synk.serialize.EnumStringSerializer

public class OrdinaryScheduleEntityMapEncoder(
    private val statusSerializer: EnumStringSerializer<ScheduleStatus> =
            EnumStringSerializer<ScheduleStatus>(),
) : MapEncoder<OrdinaryScheduleEntity> {
    public override fun encode(crdt: OrdinaryScheduleEntity): Map<String, String> {
        val map = mutableMapOf<String, String>()
        map["id"] = crdt.id.toString()
        map["userId"] = crdt.userId.toString()
        map["title"] = crdt.title
        map["description"] = crdt.description.toString()
        map["location"] = crdt.location.toString()
        map["category"] = crdt.category.toString()
        map["color"] = crdt.color.toString()
        map["isAllDay"] = crdt.isAllDay.toString()
        map["crdtKey"] = crdt.crdtKey
        map["userCrdtKey"] = crdt.userCrdtKey.toString()
        map["updateTimestamp"] = crdt.updateTimestamp.toString()
        crdt.status?.let { map["status"] = statusSerializer.serialize(it) }
        return map
    }

    public override fun decode(map: Map<String, String>): OrdinaryScheduleEntity {
        val crdt = OrdinaryScheduleEntity(
            map["id"]!!.toInt(),
            map["userId"]!!.toInt(),
            map["title"]!!,
            map["description"],
            map["location"],
            map["category"],
            map["color"],
            map["isAllDay"]!!.toBoolean(),
            map["status"]?.let { statusSerializer.deserialize(it) },
            map["crdtKey"]!!,
            map["userCrdtKey"],
            map["updateTimestamp"]?.toLong(),
        )
        return crdt
    }
}
